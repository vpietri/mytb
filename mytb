#!/usr/bin/env bash

version="0.1.0b"
module="My ToolBox"
script=${0##*/}
usage="\
$module (v$version)

Global Commands:
  $script <command> [--force]
------------------------------
  masspull <pattern>            mass git update all subdirectories with name matching <pattern>
  modnew <pattern> <destdir>    extract modules files with the <pattern> to the directory <destdir> and create the modman file
  modman <pattern> <destdir>    create modman file, searching the <pattern> (optionnal default all files) in the directory <destdir> (optional default .)
  
  mmgign                        add modman files to .gitignore
  mmst                          check for modman dir with standby files (equivalent to 'modman status')
  
  --help             display this help message
  --version          display the script's version  
  --git              git command samples
  --sh               sh command samples
"
gitresume="

------------------------------

-- Configuration
-- -- Ignore chmod
git config core.fileMode false
-- -- Add color
git config --global color.ui true

-- Common shortcut
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

-- Poser un tag
git tag -a  -m 'Version '

-- Afficher tous les tags
git show-ref --tags

-- Afficher tous les fichiers modifiés depuis une révision
git diff --name-only 82a3e6a090930627bb735f11ff64514d614b3723 HEAD
ou depuis un tag
git diff --name-only  HEAD

-- Afficher tous les commits depuis un tag donné
git log --pretty=oneline --abbrev-commit ..HEAD | grep -v Merge

-- Create local branch from tag. Useful to make a release
git checkout -b 

-- Following a synchro issue due to a direct file copy
git add . && git stash && git pull && git stash pop && git st 


-- Recherche de terme dans des fichier (ici SEARCH_TERM)
find . -name \"*\" | xargs grep 'SEARCH_TERM' | sed \"s/[^:]*:\s*//\"

-- Recherche des fichiers supprimés et application de git rm
git st | grep delete | sed \"s/#\tdeleted:    //\" | xargs git rm

------------------------------
"
shresume="

------------------------------

- Pour faire une tabulation en ligne de commande [CTRL]+v et [TAB]

- Filtre sur les prix
egrep \"PVEU[EIFB]PVSUI      PB\" pv_20121206.org.paq > pv_20121206.paq

- Sort data
sort -t$'\t' +2 -3 pv.org.paq | uniq > pv.paq


- Mass uncompress zip files
for zipfile in \`ls *.zip\`;do unzip  $zipfile;done

- Extract fields  2 and 47 from file.csv with tab separator
cut -f2,47 file.csv | tr ':' '\t'

- Find and move files with PATTERN
find . -name \"PATTERN*\" -exec cp {} /tmp/PATTERN \;

------------------------------
"

formatEcho(){
    local exp=$1;
    local color=$2;
    if ! [[ $color =~ '^[0-9]$' ]] ; then
       case $(echo $color | tr '[:upper:]' '[:lower:]') in
        black) color=0 ;;
        red) color=1 ;;
        green) color=2 ;;
        yellow) color=3 ;;
        blue) color=4 ;;
        magenta) color=5 ;;
        cyan) color=6 ;;
        white|*) color=7 ;; # white or invalid color
       esac
    fi
    tput setaf $color;
    echo $exp;
    tput sgr0;
}

generateModman(){
    local path;
    local pattern;
    local modname;
    
    if [ $1 ]; then path=$1; else path=.; fi
    if [ $2 ]; then pattern=*$2*; else pattern=*; fi
    if [ $3 ]; then modname=$3; else modname="?"; fi


    echo "Generate  $path/modman"
    echo "# Module $modname" > $path/modman
    for modpath in $(find . -path .git -prune -o -iname "$pattern"| sed "s/^\.\///g" | grep -v "/sql/")
    do
        echo "$modpath   $modpath" >> $path/modman
        formatEcho  $modpath green
    done
}


###########################
if [ "$1" = "--help" -o "$1" = "" ]; then
  echo -e "$usage"; exit 0
###########################
# Handle "--version" command
elif [ "$1" = "--version" ]; then
  echo "$module, version: $version"; exit 0
elif [ "$1" = "--git" ]; then
  echo -e "$gitresume"; exit 0
elif [ "$1" = "--sh" ]; then
  echo -e "$shresume"; exit 0
fi


_pwd=$(pwd -P)        # current path

###############################
# Handle "modnew" command
if [ "$1" = "modnew" ]; then
    pattern=$2
    destdir=$3
    if [ ! -z "$destdir" -a -e "$destdir" ]; then
      [ ! -e "$destdir/$pattern" ] && mkdir $destdir/$pattern
      echo "Extract files matching pattern '$pattern' into '$destdir/$pattern'"
      find . -iname "*$pattern*" -exec cp -r --parent {} $destdir/$pattern \;
      
      generateModman $destdir/$pattern $pattern
    else
      echo "Error directory $destdir do not exist or is not writable"
    fi
    
    exit 0
elif [ "$1" = "modman" ]; then
    generateModman $2 $3 $4
    exit 0
elif [ "$1" = "masspull" ]; then
    while read -d $'\n' repopath; do
        if [ -d $repopath/.git ]; then
            formatEcho  "Pull in $repopath" yellow
            cd $repopath && git pull
        else
            echo "Not .git repo in $repopath"
        fi
    done < <(ls -1 -d $_pwd/*/) 
    exit 0    
fi

################################
# check modman context
################################
# Find the .modman directory and store parent path in $root
mm_not_found="Module Manager directory not found."
root=$_pwd
while ! [ -d $root/.modman ]; do
  if [ "$root" = "/" ]; then echo -e $mm_not_found && exit 1; fi
  cd .. || { echo -e "ERROR: Could not traverse up from $root\n$mm_not_found" && exit 1; }
  root=$(pwd)
done

mm=$root/.modman      # path to .modman

###############################
# Handle "mmgign" command
if [ "$1" = "mmgign" ]; then
    for file in $(find * -type l -not -exec grep -q "^{}$" .gitignore \; -print)
    do
        echo $file >> .gitignore
    done
# Handle "mmst" command
elif [ "$1" = "mmst" ]; then
  shift
  if [ -n "$1" ]; then echo "Too many arguments to status command."; exit 1; fi
  while read -d $'\n' module; do
    if [ -d "$mm/$module" -a -e "$mm/$module/modman" ]; then
      cd "$mm/$module"
      if [ -d "$mm/$module/.git" ]; then
        gitfiles=(`git status --porcelain`)
        formatEcho "-- $module ($mm/$module)" green
        echo "-- ---------------------------------------------"
        if [ ! "${#gitfiles[*]}" = "0" ]; then
            git status --porcelain
        else
            echo "-- Clean"
        fi
      elif [ -d "$mm/$module/.svn" ]; then
        svn status
      else
        echo "Not a git or svn repository."
      fi
      echo
    fi
  done < <(ls -1 "$mm") 
else
    exit 0
fi

